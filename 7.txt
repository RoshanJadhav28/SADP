q1]

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error,r2_score

#load the dataset
df=pd.read_csv("Position_Salaries.csv")
print(df)

#preapre the data
X=df[['Level']].values
y=df['Salary'].values

#simple linear Regression

linear_model=LinearRegression()
linear_model.fit(X,y)

y_pred_linear=linear_model.predict(X)

#plot simple linear regression
plt.scatter(X,y,color='red')
plt.plot(X,y_pred_linear,color='blue')
plt.title('Simple linear regression')
plt.xlabel("Level")
plt.ylabel("Salary")
plt.show()
______________________________
q2]

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import LabelEncoder

# Load the dataset
df = pd.read_csv("weather_forecast.csv")

# Encode categorical features
le=LabelEncoder()
df_encoded=df.apply(le.fit_transform)

# Separate features and target variable
X = df_encoded.drop("Play", axis=1)
y = df_encoded["Play"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the Naive Bayes model
nb_model = GaussianNB()

# Train the model
nb_model.fit(X_train, y_train)

# Make predictions
y_pred = nb_model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)

print("Accuracy:", accuracy)
print("Classification Report:\n", classification_rep)



