q1]

from sklearn.datasets import fetch_20newsgroups
from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline
from sklearn import metrics

# Load the 20 newsgroups dataset
categories = None
# This will load all 20 categories
newsgroups = fetch_20newsgroups(subset='train', categories=categories, shuffle=True, random_state=42)

# Display categories in the dataset
print("Available Categories:\n", newsgroups.target_names)

X=newsgroups.data
y=newsgroups.target
# Split dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Build a pipeline to perform feature extraction and classification
text_clf = Pipeline([
    ('vect', CountVectorizer()),          # Converts text to word counts
    ('tfidf', TfidfTransformer()),        # Converts word counts to TF-IDF(Term Frequency Inverse Document Frequency) features 
    ('clf', MultinomialNB()),             # Apply Multinomial Naive Bayes classifier
])
print(text_clf)

# Train the classifier
text_clf.fit(X_train, y_train)

# Test the classifier with the test data
y_pred = text_clf.predict(X_test)

# Output accuracy
accuracy = metrics.accuracy_score(y_test, y_pred)#(y_test,X_test in place of y_pred)
print(f"Model accuracy: {accuracy:.4f}")

# Show classification report
print(metrics.classification_report(y_test, y_pred, target_names=newsgroups.target_names))

# Function to predict the category of new text
def categorize_news(text):
    predicted_category_index = text_clf.predict([text])[0]
    return newsgroups.target_names[predicted_category_index]

# Example usage
example_news="The stock market is experiencing a significant decline clue to global economic challenges."
predicted_category=categorize_news(example_news)
print("Predicted category for the news:", predicted_category)
________________________________________________
q2]

import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import LabelEncoder

# Load the dataset
df=pd.read_csv('PlayTennis.csv')
print(df.head())

# Encode categorical features and the target variable
le = LabelEncoder()
df_encoded = df.apply(le.fit_transform)
print(df_encoded.head())

# Separate features and target variable
X = df_encoded.drop(['play'],axis='columns')
y = df_encoded['play']

# Train the Decision Tree classifier
decision_tree_model = DecisionTreeClassifier(random_state=42)
decision_tree_model.fit(X, y)

# Predict and evaluate on the training set
y_pred = decision_tree_model.predict(X)
accuracy = accuracy_score(y, y_pred)
report = classification_report(y, y_pred)

# Output the results
print("Accuracy:", accuracy)
print("Classification Report:\n", report)
