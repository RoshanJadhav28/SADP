q1]

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
# Load the Iris dataset
iris = datasets.load_iris()
X = iris.data  # Features
y = iris.target  # Labels

print(X)
print(y)

# Display the shape of the dataset
print("Original shape:", X.shape)

# Apply PCA
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X)
print(X_pca)

# Display the new shape
print("Reduced shape:", X_pca.shape)

# Visualize the PCA results
plt.figure(figsize=(8, 6))
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=y, edgecolor='k', cmap='viridis', s=100)
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.title('PCA of Iris Dataset')
plt.colorbar()
plt.show()

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.2, random_state=42)
# Initialize and train the model
model = LogisticRegression()
model.fit(X_train, y_train)

# Predict on the test set
y_pred = model.predict(X_test)

# Calculate and display the accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')

# New flower measurements
new_flower = np.array([[5.1, 3.5, 1.4, 0.2]])

# Transform the new data using the same PCA
new_flower_pca = pca.transform(new_flower)
# Predict the class of the new flower
predicted_class = model.predict(new_flower_pca)
predicted_species = iris.target_names[predicted_class][0]
print(f'Predicted species for the new flower: {predicted_species}')
________________________________________________________________
q2]

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_iris
from sklearn.preprocessing import LabelEncoder

# Load the Iris dataset
iris = load_iris()
print(iris.feature_names)
print(iris.target_names)

data = pd.DataFrame(data=iris.data, columns=iris.feature_names)

#print(data)
# Add the target column with species names
data['target'] = iris.target

encoder = LabelEncoder()
data['target'] = encoder.fit_transform(data['target'])

print(data['target'])

# Create a scatter plot for Sepal Length vs Sepal Width
plt.figure(figsize=(10, 6))
sns.scatterplot(
    x='sepal length (cm)', 
    y='sepal width (cm)', 
    hue='target', 
    palette='brg', 
    data=data,
    style='target'
)

# Add labels and title
plt.title('Scatter Plot of Sepal Length vs Sepal Width (Iris Dataset)')
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Sepal Width (cm)')
plt.legend(title='Species', loc='upper right')
# Show the plot
plt.show()

