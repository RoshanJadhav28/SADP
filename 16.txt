q1]

import numpy as np

# Activation functions
def relu(x):
    return np.maximum(0, x)

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

# Derivatives of activation functions
def relu_derivative(x):
    return np.where(x > 0, 1, 0)

def sigmoid_derivative(x):
    return sigmoid(x) * (1 - sigmoid(x))

# Neural network class
class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        # Initialize weights and biases
        self.W1 = np.random.randn(hidden_size, input_size)
        self.b1 = np.random.randn(hidden_size, 1)
        self.W2 = np.random.randn(output_size, hidden_size)
        self.b2 = np.random.randn(output_size, 1)

    def forward(self, X):
        # Forward pass
        self.Z1 = np.dot(self.W1, X) + self.b1
        self.A1 = relu(self.Z1)
        self.Z2 = np.dot(self.W2, self.A1) + self.b2
        self.A2 = sigmoid(self.Z2)
        return self.A2

    def backward(self, X, Y, learning_rate=0.01):
        # Backpropagation
        m = X.shape[1]

        # Compute output error
        dZ2 = self.A2 - Y
        dW2 = (1 / m) * np.dot(dZ2, self.A1.T)
        db2 = (1 / m) * np.sum(dZ2, axis=1, keepdims=True)

        # Compute hidden layer error
        dA1 = np.dot(self.W2.T, dZ2)
        dZ1 = dA1 * relu_derivative(self.Z1)
        dW1 = (1 / m) * np.dot(dZ1, X.T)
        db1 = (1 / m) * np.sum(dZ1, axis=1, keepdims=True)

        # Update weights and biases
        self.W1 -= learning_rate * dW1
        self.b1 -= learning_rate * db1
        self.W2 -= learning_rate * dW2
        self.b2 -= learning_rate * db2

    def train(self, X, Y, iterations=1000, learning_rate=0.01):
        for i in range(iterations):
            self.forward(X)
            self.backward(X, Y, learning_rate)

# Example usage
if __name__ == "__main__":
    # Input features (2 input nodes)
    X = np.array([[0, 0, 1, 1], 
                  [0, 1, 0, 1]])  # shape (2, 4)

    # Output labels (1 output node)
    Y = np.array([[0, 1, 1, 0]])  # shape (1, 4)

    # Create a neural network (2 inputs, 3 hidden nodes, 1 output)
    nn = NeuralNetwork(input_size=2, hidden_size=3, output_size=1)

    # Train the network
    nn.train(X, Y, iterations=10000, learning_rate=0.01)

    # Test the network
    output = nn.forward(X)
    print("Predictions:")
    print(output)
______________________________________________
q2]

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Load the dataset
data = pd.read_csv("BostonHousing.csv")

# Define the single feature (RM) and target (medv)
X = data[['rm']]  # Selecting 'rm' as the single independent variable
y = data['medv']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Simple Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_test_pred = model.predict(X_test)

# Evaluate the model

test_rmse = np.sqrt(mean_squared_error(y_test, y_test_pred))
test_r2 = r2_score(y_test, y_test_pred)

# Display results
print(f"Testing RMSE: {test_rmse:.2f}")
print(f"Testing R^2: {test_r2:.2f}")