q1]
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset
data = pd.read_csv('petrol_consumption.csv')

# Define features (X) and target (y)
X = data[['Petrol_tax', 'Average_income', 'Paved_Highways', 'Population_Driver_licence(%)']]
y = data['Petrol_Consumption']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate performance metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Display results
print("Mean Squared Error (MSE):", mse)
print("R-squared (RÂ²):", r2)
_________________________________
q2]

import pandas as pd
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.datasets import load_iris
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report

iris=load_iris()
X=iris.data
y=iris.target
#print(X)

#train test the dataset
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)

#preprocessing the data
scaler=StandardScaler()
X_train=scaler.fit_transform(X_train)
X_test=scaler.fit_transform(X_test)

k=3
model=KNeighborsClassifier(n_neighbors=k)
model.fit(X_train,y_train)

y_pred=model.predict(X_test)

accuracy=accuracy_score(y_test,y_pred)
print(f'accuracy of KNN model :{accuracy}')

confusion_matrix=confusion_matrix(y_test,y_pred)
print(f'confusion_matrix \n{confusion_matrix}')

classification_report=classification_report(y_test,y_pred)
print(f'classification_report \n{classification_report}')
#predition of new flower
new_flower=np.array([[5.1,3.5,1.4,2.2]])
predicted_flower=model.predict(new_flower)

print(f'Predicted flower:{iris.target_names[predicted_flower]}')
