q1]

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Load the dataset
data = pd.read_csv("BostonHousing.csv")

# Define the single feature (RM) and target (medv)
X = data[['rm']]  # Selecting 'rm' as the single independent variable
y = data['medv']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Simple Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_test_pred = model.predict(X_test)

# Evaluate the model

test_rmse = np.sqrt(mean_squared_error(y_test, y_test_pred))
test_r2 = r2_score(y_test, y_test_pred)

# Display results
print(f"Testing RMSE: {test_rmse:.2f}")
print(f"Testing R^2: {test_r2:.2f}")
_______________________________________
q2]

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score,classification_report,confusion_matrix
import matplotlib.pyplot as plt
from sklearn import tree

#Load dataset
data=pd.read_csv("BankNote_Authentication.csv")
print(data)

#Assuming last column is label and rest are features
x=data.drop(['class'],axis='columns') #data.iloc[:,:-1] #features
y=data['class']                       #data.iloc[:,-1] #labels

#split dataset into training and testing set
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

#create and train decision tree model
decisiontree=DecisionTreeClassifier(random_state=42)
decisiontree.fit(x_train,y_train)

#make predictions
y_pred=decisiontree.predict(x_test)

#evaluate the model
accuracy=accuracy_score(y_test,y_pred)
print(f'Accuracy:{accuracy:.2f}')

print(f'Classification report:')
print(classification_report(y_test,y_pred))

print('Confusion matrix:')
print(confusion_matrix(y_test,y_pred))

#visualize decision tree
plt.figure(figsize=(15,8))
tree.plot_tree(decisiontree,filled=True,feature_names=x.columns,class_names=['Genuine','Forged'])
plt.title('Decision Tree Visualization')
plt.show()

