q1]

import pandas as pd
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.datasets import load_iris
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report

iris=load_iris()
X=iris.data
y=iris.target
#print(X)

#train test the dataset
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)

#preprocessing the data
scaler=StandardScaler()
X_train=scaler.fit_transform(X_train)
X_test=scaler.fit_transform(X_test)

k=3
model=KNeighborsClassifier(n_neighbors=k)
model.fit(X_train,y_train)

y_pred=model.predict(X_test)

accuracy=accuracy_score(y_test,y_pred)
print(f'accuracy of KNN model :{accuracy}')

confusion_matrix=confusion_matrix(y_test,y_pred)
print(f'confusion_matrix \n{confusion_matrix}')

classification_report=classification_report(y_test,y_pred)
print(f'classification_report \n{classification_report}')
#predition of new flower
new_flower=np.array([[5.1,3.5,1.4,2.2]])
predicted_flower=model.predict(new_flower)

print(f'Predicted flower:{iris.target_names[predicted_flower]}')
___________________________________________________
q2]

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error,r2_score

#load the dataset
df=pd.read_csv("Position_Salaries.csv")
print(df)

#preapre the data
X=df[['Level']].values
y=df['Salary'].values

#simple linear Regression

linear_model=LinearRegression()
linear_model.fit(X,y)

y_pred_linear=linear_model.predict(X)

#plot simple linear regression
plt.scatter(X,y,color='red')
plt.plot(X,y_pred_linear,color='blue')
plt.title('Simple linear regression')
plt.xlabel("Level")
plt.ylabel("Salary")
plt.show()

#polynomial 
poly=PolynomialFeatures(degree=4) 
X_poly=poly.fit_transform(X) 

poly_model=LinearRegression()
poly_model.fit(X_poly,y)

y_pred_poly=poly_model.predict(X_poly)

#plot polynomial regression
plt.scatter(X,y,color='green')
plt.plot(X,y_pred_poly,color='yellow')
plt.title('Polynomial linear regression')
plt.xlabel("Level")
plt.ylabel("Salary")
plt.show()

#evaluate the simple-linear model
mse_linear=mean_squared_error(y,y_pred_linear)
r2_linear=r2_score(y,y_pred_linear)

print(f"Mean squared error :{mse_linear}")
print(f"R2 score:{r2_linear}")

#evaluate the polynomial model
mse_poly=mean_squared_error(y,y_pred_poly)
r2_poly=r2_score(y,y_pred_poly)

print(f"Mean squared error :{mse_poly}")
print(f"R2 score:{r2_poly}")

#predict the salary for level 11 and 12 simple linear
level_11_12=np.array([[11],[12]]) 
salary_pred_linear=linear_model.predict(level_11_12)
print(f"simple linear")
print(f"Predicted salary for level 11:{salary_pred_linear[0]}")
print(f"Predicted salary for level 12:{salary_pred_linear[1]}")

#predict the salary for level 11 and 12 polynomial linear
level_11_12=poly.transform([[11],[12]])
salary_pred_poly=poly_model.predict(level_11_12)
print(f"polynomial regression")
print(f"Predicted salary for level 11:{salary_pred_poly[0]}")
print(f"Predicted salary for level 12:{salary_pred_poly[1]}")

