q1]

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error,r2_score
import matplotlib.pyplot as plt

#load dataset
df=pd.read_csv("HousePricePrediction (1).csv")
print(df)

#preprocessing the data
print(df.isnull().sum())

df=df.dropna(subset=['SalePrice'])
print(df)

df.fillna(0,inplace=True)
print(df.isnull().sum())

X=df[['LotArea','OverallCond','YearBuilt','TotalBsmtSF']]
y=df['SalePrice']

print(X)    

#split the data train and testing 
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=30)

#create the train model
model=LinearRegression()
model.fit(X_train,y_train)

#Predict the house_price
y_pred=model.predict(X_test)

#print coefficient and intercept
print("Model coefficient: ",model.coef_)
print("Model intercept :",model.intercept_)


#compare actual vs predicted value
comparison_df=pd.DataFrame({'Actual Price:'y_test,
                            'Predicted Price :'y_pred})
print(comparison_df)


#evaluate the model
mse=mean_squared_error(y_test,y_pred)
r2=r2_score(y_test,y_pred)
print(f"Mean squared error :{mse}")
print(f"R2 score :{r2}")


#plot actual vs predicted
plt.scatter(y_test,y_pred)
plt.xlabel("Actual price")
plt.ylabel("Prediced price")
plt.title("Actual vs predicted house price ")
plt.show()
______________________________________________
q2]

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import StandardScaler

# Load the dataset
df = pd.read_csv("UniversalBank.csv")
print(df.head())

# Selecting features and target variable
X=df.drop(columns=['ID','ZIP Code','Personal Loan'])
y=df['Personal Loan']

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)

#preprocess tha data
scaler=StandardScaler()
X_train_scaled=scaler.fit_transform(X_train)
X_test_scaled=scaler.fit_transform(X_test)

svm_model=SVC(kernel='linear',random_state=42)
svm_model.fit(X_train_scaled,y_train)

# Make predictions and evaluate the model
y_pred = svm_model.predict(X_test_scaled)
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

# Output the results
print("Accuracy:", accuracy)
print("Classification Report:\n", report)

