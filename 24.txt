q1]

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score,classification_report,confusion_matrix
import matplotlib.pyplot as plt
from sklearn import tree

#Load dataset
data=pd.read_csv("BankNote_Authentication.csv")
print(data)

#Assuming last column is label and rest are features
x=data.drop(['class'],axis='columns') #data.iloc[:,:-1] #features
y=data['class']                       #data.iloc[:,-1] #labels

#split dataset into training and testing set
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

#create and train decision tree model
decisiontree=DecisionTreeClassifier(random_state=42)
decisiontree.fit(x_train,y_train)

#make predictions
y_pred=decisiontree.predict(x_test)

#evaluate the model
accuracy=accuracy_score(y_test,y_pred)
print(f'Accuracy:{accuracy:.2f}')

print(f'Classification report:')
print(classification_report(y_test,y_pred))

print('Confusion matrix:')
print(confusion_matrix(y_test,y_pred))

#visualize decision tree
plt.figure(figsize=(15,8))
tree.plot_tree(decisiontree,filled=True,feature_names=x.columns,class_names=['Genuine','Forged'])
plt.title('Decision Tree Visualization')
plt.show()
__________________________________
q2]

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import StandardScaler

# Load the dataset
df = pd.read_csv("UniversalBank.csv")
print(df.head())

# Selecting features and target variable
X=df.drop(columns=['ID','ZIP Code','Personal Loan'])
y=df['Personal Loan']

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)

#preprocess tha data
scaler=StandardScaler()
X_train_scaled=scaler.fit_transform(X_train)
X_test_scaled=scaler.fit_transform(X_test)

svm_model=SVC(kernel='linear',random_state=42)
svm_model.fit(X_train_scaled,y_train)

# Make predictions and evaluate the model
y_pred = svm_model.predict(X_test_scaled)
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

# Output the results
print("Accuracy:", accuracy)
print("Classification Report:\n", report)

